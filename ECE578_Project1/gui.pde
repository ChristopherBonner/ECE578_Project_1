/* =========================================================
 * ====                   WARNING                        ===
 * =========================================================
 * The code in this tab has been generated from the GUI form
 * designer and care should be taken when editing this file.
 * Only add/edit code inside the event handlers i.e. only
 * use lines between the matching comment tags. e.g.

 void myBtnEvents(GButton button) { //_CODE_:button1:12356:
     // It is safe to enter your event code here  
 } //_CODE_:button1:12356:
 
 * Do not rename this tab!
 * =========================================================
 */

public void Exit_click(GButton source, GEvent event) { //_CODE_:Exit:710982:
  println("Exit - GButton >> GEvent." + event + " @ " + millis());
  exit();
} //_CODE_:Exit:710982:

public void ScenA_clicked(GOption source, GEvent event) { //_CODE_:Scenario_A:899812:
  println("Scenario_A - GOption >> GEvent." + event + " @ " + millis());
  reset_everything();
  setup_scene_A();
  
  scene = 0;
} //_CODE_:Scenario_A:899812:

public void ScenB_clicked(GOption source, GEvent event) { //_CODE_:Scenario_B:753477:
  println("Scenario_B - GOption >> GEvent." + event + " @ " + millis());
  reset_everything();
  setup_scene_B();

  scene = 1;
} //_CODE_:Scenario_B:753477:

public void coll_avoid_clicked(GOption source, GEvent event) { //_CODE_:coll_avoid:461684:
  println("coll_avoid - GOption >> GEvent." + event + " @ " + millis());
  reset_everything();
} //_CODE_:coll_avoid:461684:

public void carrier_sense_clicked(GOption source, GEvent event) { //_CODE_:carrier_sense:562831:
  println("carrier_sense - GOption >> GEvent." + event + " @ " + millis());
  reset_everything();
} //_CODE_:carrier_sense:562831:

public void state_change1(GSlider source, GEvent event) { //_CODE_:state_debug:954275:
  println("state_debug - GSlider >> GEvent." + event + " @ " + millis());
  A.set_state(state_debug.getValueI());
  X.set_state(state_debug.getValueI());
} //_CODE_:state_debug:954275:

public void advance_click(GButton source, GEvent event) { //_CODE_:advance:764250:
  //println("advance - GButton >> GEvent." + event + " @ " + millis());
  
  tick +=1;
  sim_tick(0);
  
  
} //_CODE_:advance:764250:

public void A_trans_click1(GButton source, GEvent event) { //_CODE_:A_trans:981971:
  println("A_trans - GButton >> GEvent." + event + " @ " + millis());
  A.set_state(2);
} //_CODE_:A_trans:981971:

public void C_trans_click1(GButton source, GEvent event) { //_CODE_:C_Trans:767148:
  println("B_Trans - GButton >> GEvent." + event + " @ " + millis());
  C.set_state(2);
} //_CODE_:C_Trans:767148:

public void btrans_click(GButton source, GEvent event) { //_CODE_:B_trans:403026:
  println("B_trans - GButton >> GEvent." + event + " @ " + millis());
  B.set_state(2);
} //_CODE_:B_trans:403026:



// Create all the GUI controls. 
// autogenerated do not edit
public void createGUI(){
  G4P.messagesEnabled(false);
  G4P.setGlobalColorScheme(GCScheme.BLUE_SCHEME);
  G4P.setCursor(ARROW);
  surface.setTitle("Sketch Window");
  Exit = new GButton(this, 0, 0, 80, 30);
  Exit.setText("EXIT");
  Exit.setTextBold();
  Exit.addEventHandler(this, "Exit_click");
  Scenario = new GToggleGroup();
  Scenario_A = new GOption(this, 10, 40, 120, 20);
  Scenario_A.setIconAlign(GAlign.LEFT, GAlign.MIDDLE);
  Scenario_A.setText("Concurrent");
  Scenario_A.setTextBold();
  Scenario_A.setOpaque(false);
  Scenario_A.addEventHandler(this, "ScenA_clicked");
  Scenario_B = new GOption(this, 10, 62, 120, 20);
  Scenario_B.setIconAlign(GAlign.LEFT, GAlign.MIDDLE);
  Scenario_B.setText("Hidden");
  Scenario_B.setTextBold();
  Scenario_B.setOpaque(false);
  Scenario_B.addEventHandler(this, "ScenB_clicked");
  Scenario.addControl(Scenario_A);
  Scenario_A.setSelected(true);
  Scenario.addControl(Scenario_B);
  Protocol = new GToggleGroup();
  coll_avoid = new GOption(this, 160, 40, 160, 20);
  coll_avoid.setIconAlign(GAlign.LEFT, GAlign.MIDDLE);
  coll_avoid.setText("Collision Avoidance");
  coll_avoid.setTextBold();
  coll_avoid.setOpaque(false);
  coll_avoid.addEventHandler(this, "coll_avoid_clicked");
  carrier_sense = new GOption(this, 160, 60, 160, 20);
  carrier_sense.setIconAlign(GAlign.LEFT, GAlign.MIDDLE);
  carrier_sense.setText("Virtual Carrier Sensing");
  carrier_sense.setTextBold();
  carrier_sense.setOpaque(false);
  carrier_sense.addEventHandler(this, "carrier_sense_clicked");
  Protocol.addControl(coll_avoid);
  coll_avoid.setSelected(true);
  Protocol.addControl(carrier_sense);
  state_debug = new GSlider(this, 412, 781, 200, 80, 10.0);
  state_debug.setShowValue(true);
  state_debug.setShowLimits(true);
  state_debug.setLimits(0, 0, 3);
  state_debug.setShowTicks(true);
  state_debug.setNumberFormat(G4P.INTEGER, 0);
  state_debug.setOpaque(false);
  state_debug.addEventHandler(this, "state_change1");
  advance = new GButton(this, 274, 785, 80, 30);
  advance.setText("TICK");
  advance.setTextBold();
  advance.addEventHandler(this, "advance_click");
  A_trans = new GButton(this, 56, 185, 80, 30);
  A_trans.setText("Transmit A");
  A_trans.addEventHandler(this, "A_trans_click1");
  C_Trans = new GButton(this, 52, 394, 80, 30);
  C_Trans.setText("Transmit B");
  C_Trans.addEventHandler(this, "C_trans_click1");
  B_trans = new GButton(this, 517, 183, 80, 30);
  B_trans.setText("B Transmit");
  B_trans.addEventHandler(this, "btrans_click");
}

// Variable declarations 
// autogenerated do not edit
GButton Exit; 
GToggleGroup Scenario; 
GOption Scenario_A; 
GOption Scenario_B; 
GToggleGroup Protocol; 
GOption coll_avoid; 
GOption carrier_sense; 
GSlider state_debug; 
GButton advance; 
GButton A_trans; 
GButton C_Trans; 
GButton B_trans; 